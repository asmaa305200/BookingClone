@using BookingClone.Application.Features.HotelReviewFeatures.DTOs;
@using BookingClone.Domain.Common;
@using BookingClone.Domain.Entities;
@model PagedList<GetHotelReviewDto>
@{
    ViewData["Title"] = "Index";

    string SetBadgeColor(decimal[] rates, out decimal averageRating)
    {
        averageRating = rates.Average();

        return averageRating switch
        {
            decimal i when i >= 8 && i <= 10 => "bg-success",
            decimal i when i >= 6 && i < 8 => "bg-secondary",
            decimal i when i >= 4 && i < 6 => "bg-warning",
            decimal i when i >= 1 && i < 4 => "bg-danger",
            _ => string.Empty
        };
    }
}

<div class="row">
    <div class="col-6">
        <h2 class="text-primary mx-2">Hotel Reviews List</h2>
    </div>
    <div class="col-6 text-end">
        <a asp-action="Create" class="btn btn-primary">
            <i class="bi bi-plus"></i>
            Create New Hotel Review
        </a>
    </div>
</div>
<div class="p-1 border rounded">
    <table class="table table-striped border">
        <thead>
            <tr class="table-secondary">
                <th>ID</th>
                <th>Avg. Rate</th>
                <th>Positive Review</th>
                <th>Negative Review</th> 
                <th>Hotel ID</th> 
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Data)
            {
                <tr>
                    <td>@item.ID</td>
                    <td>
                        <span class="badge @SetBadgeColor(new[] { item.LocationRate, item.CleanlinessRate, item.ComfortRate, item.StaffRate, item.FacilitiesRate, item.ValueForMoneyRate }, out decimal averageRating)">
                            @($"{averageRating:0.#}")
                        </span>
                    </td>
                    <td>@item.PositiveReview</td>
                    <td>@item.NegativeReview</td>
                    <td>@item.HotelID</td>
                    <td>
                        <div>
                            <a asp-action="Details" asp-route-id="@item.ID" class="btn btn-secondary">
                                <i class="bi bi-list"></i>
                                Details
                            </a>
                            <a asp-action="Edit" asp-route-id="@item.ID" class="btn btn-info">
                                <i class="bi bi-pen"></i>
                                Edit
                            </a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<nav aria-label="Page navigation example" class="mx-2">
    <ul class="pagination">
        <li class="page-item @(Model.IsFirstPage ? "disabled" : string.Empty)">
            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageNumber - 1)" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        @for (int i = 1; i < Model.TotalPages + 1; i++)
        {
            <li class="page-item">
                <a class="page-link @(Model.PageNumber == i ? "active" : string.Empty)" asp-action="Index" asp-route-pageNumber="@i">@i</a>
            </li>
        }
        <li class="page-item @(Model.IsLastPage ? "disabled" : string.Empty)">
            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageNumber + 1)" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>